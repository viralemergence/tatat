# Download Docker image to Kamiak with Singularity and convert to Singularity image
mkdir ./src/singularity_image
module load singularity
singularity pull ./src/singularity_image/tatat.sif docker://$DOCKER_USER_ID/transcriptome-assembly-thinning-annotation-tool:latest

# For making scratch space
mkworkspace
export myscratch="$(mkworkspace)"
echo $myscratch
lsworkspace

# Load variables for commands
. ./.env

# Single: SRR2913352
# Paired: SRR2914369

# Test sra_read_download.py
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $SRA_DOWNLOAD_DIR:/src/data/download_dir \
    --bind $SRA_COLLATE_DIR:/src/data/collate_dir \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/sra_read_download.py \
    -sra_number SRR2914369 \
    -download_dir /src/data/download_dir \
    -collate_dir /src/data/collate_dir \
    -testing

# Test fastp_orchestration.py
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $SRA_COLLATE_DIR:/src/data/fastq_dir \
    --bind $FASTQ_TRIMMED_DIR:/src/data/trimmed \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/fastp_orchestration.py \
    -i /src/data/fastq_dir \
    -o /src/data/trimmed \
    -u SRR2914369 -r1a $R1_ADAPTER -r2a $R2_ADAPTER --cpus 10

# Test rnaspades_orchestration.py
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $FASTQ_TRIMMED_DIR:/src/data/trimmed \
    --bind $RNASPADES_ASSEMBLY_DIR:/src/data/assembly \
    --bind $RNASPADES_COLLATED_ASSEMBLY_DIR:/src/data/collated \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/rnaspades_orchestration.py \
    -fastq_dir /src/data/trimmed \
    -assembly_dir /src/data/assembly \
    -collated_dir /src/data/collated \
    -unique_identifier SRR2914369 -cpus 10 -memory 30

# Test merge_fastas_and_set_metadata.py
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $RNASPADES_COLLATED_ASSEMBLY_DIR:/src/data/collated \
    --bind $HOST_DATA_DIR/assemblies_and_metadata:/src/data/outdir \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/thinning/merge_fastas_and_set_metadata.py \
    -assembly_fasta_dir /src/data/collated \
    -outdir /src/data/outdir \
    -merged_name raw_transcriptome.fasta \
    -metadata_name transcriptome_metadata.csv

# Test evigene_orchestration.py run_evigene
singularity exec \
    --pwd /src \
    --no-home \
    --env LC_ALL=C \
    --bind $HOST_APP_DIR:/src/app \
    --bind $HOST_DATA_DIR/assemblies_and_metadata:/src/data/transcripts \
    --bind $EVIGENE_OUTPUT_DIR:/src/data/evigene_output \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/thinning/evigene_orchestration.py \
    -assembly_fasta /src/data/transcripts/raw_transcriptome_subset.fasta \
    -outdir /src/data/evigene_output \
    -metadata /src/data/transcripts/transcriptome_metadata.csv \
    -cpus 9 -mem 25000 -run_evigene -phetero 2 --minaa 99 \
    -prefix_column sample_id

# Test evigene_orchestration.py run_metadata_appender
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $HOST_DATA_DIR/assemblies_and_metadata:/src/data/transcripts \
    --bind $EVIGENE_OUTPUT_DIR:/src/data/evigene_output \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/thinning/evigene_orchestration.py \
    -assembly_fasta /src/data/transcripts/raw_transcriptome.fasta \
    -outdir /src/data/evigene_output \
    -metadata /src/data/transcripts/transcriptome_metadata.csv \
    -run_metadata_appender

# Test evigene_orchestration.py CdsMetadataManager
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $HOST_DATA_DIR/assemblies_and_metadata:/src/data/transcripts \
    --bind $EVIGENE_OUTPUT_DIR:/src/data/evigene_output \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/thinning/evigene_orchestration.py \
    -assembly_fasta /src/data/transcripts/raw_transcriptome.fasta \
    -outdir /src/data/evigene_output \
    -metadata /src/data/transcripts/transcriptome_metadata.csv \
    -cds_metadata /src/data/transcripts/cds_metadata.csv

# Test kmer_coverage_qc.py
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $HOST_DATA_DIR/assemblies_and_metadata:/src/data/transcripts \
    --bind $HOST_DATA_DIR/kmer_qc:/src/data/kmer_qc \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/thinning/kmer_coverage_qc.py \
    -metadata /src/data/transcripts/transcriptome_metadata.csv \
    -coverage_cutoff 1.5 \
    -update_kmer_coverage_pass \
    -qc_dir /src/data/kmer_qc

# Test evigene_cds_aa_extraction.py
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $HOST_DATA_DIR/assemblies_and_metadata:/src/data/transcripts \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/evigene_cds_aa_extraction.py \
    -assembly_fasta /src/data/transcripts/raw_transcriptome.fasta \
    -transcript_metadata /src/data/transcripts/transcriptome_metadata.csv \
    -cds_metadata /src/data/transcripts/cds_metadata.csv \
    -cds_fasta /src/data/transcripts/cds.fasta \
    -aa_fasta /src/data/transcripts/aa.fasta

# To pull nr database
# Note: takes a long time to download and decompress (~5 hrs on HPC); also ~660 GB in 2025
singularity exec \
    --pwd /src \
    --no-home \
    --env LC_ALL=C,NCBI_API_KEY=$NCBI_API_KEY \
    --bind $HOST_APP_DIR:/src/app \
    --bind $NR_BLASTDB_DIR:/src/blastdb \
    $SINGULARITY_IMAGE \
    bash /src/app/annotation/database_prep.sh pull-nr-database

# To extract vertebrata sequences from nr database (~20 min on HPC)
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $NR_BLASTDB_DIR:/src/blastdb \
    --bind $TATAT_BLASTDB_DIR:/src/tatat_blastdb \
    $SINGULARITY_IMAGE \
    bash /src/app/annotation/database_prep.sh \
    extract-taxon-protein-sequences \
    7742 /src/tatat_blastdb/7742.fsa

# To build vertebrata blast database from sequences (~12 min on HPC)
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $TATAT_BLASTDB_DIR:/src/blastdb \
    $SINGULARITY_IMAGE \
    bash /src/app/annotation/database_prep.sh \
    make_protein_blast_db \
    /src/blastdb/7742.fsa "vertebrata" 7742 /src/blastdb/vertebrata

# To prepare vertebrata database for diamond usage (~2 min on HPC)
singularity exec \
    --pwd /src \
    --no-home \
    --bind $TATAT_BLASTDB_DIR:/src/blastdb \
    $SINGULARITY_IMAGE \
    diamond prepdb -d /src/blastdb/vertebrata

# To run diamond search in blastp mode (~X min on HPC)
singularity exec \
    --pwd /src \
    --no-home \
    --bind $TATAT_BLASTDB_DIR:/src/blastdb \
    --bind $HOST_DATA_DIR/assemblies_and_metadata:/src/data/transcripts \
    --bind $DIAMOND_HITS_DIR:/src/diamond_hits \
    $SINGULARITY_IMAGE \
    diamond blastp -d /src/blastdb/vertebrata \
    -q /src/data/transcripts/aa_subset.fasta \
    -o /src/diamond_hits/aa_subset_hits.tsv \
    -p 10 -b 8 -c 1 -k 1

# To extract diamond results accession numbers, convert to gene symbols,
# and pick CDS to represent each gene
singularity exec \
    --pwd /src \
    --no-home \
    --env NCBI_API_KEY=$NCBI_API_KEY \
    --bind /etc:/etc \
    --bind $HOST_APP_DIR:/src/app \
    --bind $DIAMOND_HITS_DIR:/src/diamond_hits \
    --bind $HOST_DATA_DIR/assemblies_and_metadata:/src/data/transcripts \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/annotation/assign_gene_annotations_to_cds.py \
    -diamond_results /src/diamond_hits/aa_hits.tsv \
    -accesion_numbers_out /src/diamond_hits/accession_numbers.csv \
    -cds_metadata /src/data/transcripts/cds_metadata.csv

# To calculate intersection of core genes with msa remake genes
singularity exec \
    --pwd /src \
    --no-home \
    --bind $HOST_APP_DIR:/src/app \
    --bind $HOST_DATA_DIR:/src/data \
    $SINGULARITY_IMAGE \
    python3 -u /src/app/post_annotation_qc/intersect_core_genes.py \
    -cds_metadata /src/data/assemblies_and_metadata/cds_metadata.csv \
    -ncbi_genes_path /src/data/ncbi_gene_results_9407.txt